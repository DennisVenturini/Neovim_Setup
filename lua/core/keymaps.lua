------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
local del = vim.keymap.del

del({ "n", "x" }, "gra") -- code action
del("n", "grn") -- rename
del("n", "grr") -- references
del("n", "gri") -- implementation
del("n", "grt") -- type definition
del({ "i", "s" }, "<C-s>") -- signature help in insert/select
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Helper function for keymaps
local function map(mode, lhs, rhs, desc)
	vim.keymap.set(mode, lhs, rhs, { noremap = true, silent = true, desc = desc })
end
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Clears all writeable registers
vim.api.nvim_create_user_command("ClearRegisters", function()
	for _, reg in ipairs(vim.split('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-"*+', "")) do
		vim.fn.setreg(reg, {})
	end
	print("âœ¨ All registers cleared!")
end, {})
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Empty line BELOW current line
map("n", "<M-l>", function()
	local row = vim.api.nvim_win_get_cursor(0)[1]
	vim.api.nvim_buf_set_lines(0, row, row, false, { "" })
end, "Empty line below (Normal mode)")

-- Empty line ABOVE current line
map("n", "<M-h>", function()
	local row = vim.api.nvim_win_get_cursor(0)[1]
	vim.api.nvim_buf_set_lines(0, row - 1, row - 1, false, { "" })
end, "Empty line above (Normal mode)")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic keymaps
map("n", "[d", function()
	vim.diagnostic.jump({ count = -1, float = true })
end, "Go to previous diagnostic message")

map("n", "]d", function()
	vim.diagnostic.jump({ count = 1, float = true })
end, "Go to next diagnostic message")

map("n", "<leader>d", vim.diagnostic.open_float, "Open floating diagnostic message")
map("n", "<leader>q", vim.diagnostic.setloclist, "Open diagnostics list")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Highlight when yanking (copying) text
--  Try it with `yap` in normal mode
--  See `:help vim.hl.on_yank()`
vim.api.nvim_create_autocmd("TextYankPost", {
	desc = "Highlight when yanking (copying) text",
	group = vim.api.nvim_create_augroup("kickstart-highlight-yank", { clear = true }),
	callback = function()
		vim.hl.on_yank()
	end,
})
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Quickfix list navigation
map("n", "<M-j>", "<Cmd>try | cnext | catch | cfirst | catch | endtry<CR>", "Quickfix next")
map("n", "<M-k>", "<Cmd>try | cprevious | catch | clast | catch | endtry<CR>", "Quickfix prev")
map("n", "<M-o>", function()
	for _, win in ipairs(vim.fn.getwininfo()) do
		if win.quickfix == 1 then
			vim.cmd("cclose")
			return
		end
	end
	vim.cmd("copen")
end, "Toggle Quickfix list")

map("n", "<M-p>", function()
	local bufnr = vim.api.nvim_get_current_buf()
	local pos = vim.api.nvim_win_get_cursor(0)
	vim.fn.setqflist(
		{ { bufnr = bufnr, lnum = pos[1], col = pos[2] + 1, text = vim.api.nvim_buf_get_name(bufnr) } },
		"a"
	)
end, "Quickfix: add current buffer @cursor")

-- Clear the entire quickfix list and close the window
map("n", "<M-i>", function()
	vim.fn.setqflist({}, "r") -- replace with empty list
	pcall(vim.cmd, "cclose")
	vim.notify("Quickfix: list cleared")
end, "Quickfix: clear list")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- custom w, e and b motion for snake and camelcase
local function move_case_snake(dir)
	local current_line = vim.fn.getline(".")
	local column_number_of_cursor = vim.fn.col(".")
	local target = nil

	if dir == "forward" or dir == "end" then
		local line_string_after_cursor = current_line:sub(column_number_of_cursor + 1)
		local next_uppercase = line_string_after_cursor:find("%u")
		local next_snakecase = line_string_after_cursor:find("_[%a]")

		if dir == "end" then
			if next_snakecase == 1 then
				print(line_string_after_cursor)
				line_string_after_cursor = line_string_after_cursor:sub(2)
				print(line_string_after_cursor)
				print(next_snakecase)
				next_snakecase = line_string_after_cursor:find("_[%a]")

				if next_snakecase then
					next_snakecase = next_snakecase + 1
				end
				print(next_snakecase)
			end

			if next_uppercase and next_snakecase then
				target = math.min(next_uppercase, next_snakecase + 1) - 1
			else
				target = (next_snakecase and next_snakecase - 1) or (next_uppercase and next_uppercase - 1)
			end
		elseif dir == "forward" then
			if next_uppercase and next_snakecase then
				target = math.min(next_uppercase, next_snakecase + 1)
			else
				target = next_uppercase or (next_snakecase and next_snakecase + 1)
			end
		end
	elseif dir == "backward" then
		local line_before_cursor = current_line:sub(1, column_number_of_cursor - 1):reverse()
		local prev_upper = line_before_cursor:find("%u")
		local prev_snake = line_before_cursor:find("_[%a]")

		if prev_upper and prev_snake then
			target = math.min(prev_upper, prev_snake + 1)
		else
			target = prev_upper or (prev_snake and prev_snake + 1)
		end
	end

	if not target then
		return
	end

	local move = nil
	if dir == "forward" or dir == "end" then
		move = target .. "l"
	elseif dir == "backward" then
		move = target .. "h"
	end

	vim.cmd("normal! " .. move)
end

local function wmotion_case_and_snake_sensitive()
	move_case_snake("forward")
end

local function bmotion_case_and_snake_sensitive()
	move_case_snake("backward")
end

local function emotion_case_and_snake_sensitive()
	move_case_snake("end")
end

map({ "n", "x", "o" }, "Å¿", wmotion_case_and_snake_sensitive, "Camel & Snake forward motion (like w)")
map({ "n", "x", "o" }, "â€œ", bmotion_case_and_snake_sensitive, "Camel & Snake backward motion (like b)")
map({ "n", "x", "o" }, "â‚¬", emotion_case_and_snake_sensitive, "Camel & Snake end motion (like e)")
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Spacebar leader key and fd as esc
vim.g.mapleader = " "
map({ "i", "v", "n", "s", "x", "o", "c" }, "fd", "<Esc>", "")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Netrw as backup
map("n", "<leader>f", "<cmd>Ex<cr>", "Netrw: Explore")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Save and Quit
map("n", "<C-s>", "<cmd>w<cr>", "Save")
map("n", "<leader>wa", "<cmd>wa!<cr>", "Save all!")

map("n", "<leader>qn", "<cmd>qa!<cr>", "Quit")
map("n", "<C-q>", "<cmd>q<cr>", "Quit all!")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Clear highlights on search when pressing <Esc> in normal mode
--  See `:help hlsearch`
map("n", "<Esc>", "<cmd>nohlsearch<CR>")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Disable the Spacebar key's default behavior in normal and visual modes
map({ "n", "v" }, "<Space>", "<Nop>", "")

-- Disable the Spacebar key's default behavior in normal and visual modes
map("n", "J", "mzJ`z", "Cursor stays in place")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Add closing comma or semicolum
map("n", "<leader>as", "A;<Esc>", "Add semicolum at the end")
map("n", "<leader>ak", "A,<Esc>", "Add comma at the end")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Move lines
map("v", "J", ":m '>+1<CR>gv=gv", "Move visual selection down")
map("v", "K", ":m '<-2<CR>gv=gv", "Move visual selection up")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- delete single character without copying into register
map("n", "x", '"_x', "delete single character without copying into register")

-- Keep last yanked when pasting
map("v", "p", '"_dP', "Keep last yanked when pasting")

-- yank into named reg
map({ "n", "v" }, "Â»", '"yy', "yank into y register")

-- paste from y reg
map({ "n", "v", "i" }, "Â«", '"yp', "paste from y register")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Vertical scroll and center
map("n", "<C-d>", "<C-d>zz", "Vertical scroll and center")
map("n", "<C-u>", "<C-u>zz", "Vertical scroll and center")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Find and center
map("n", "n", "nzzzv", "Find and center")
map("n", "N", "Nzzzv", "Find and center")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Resize with arrows
map("n", "<Up>", ":resize -2<CR>", "Resize with arrows")
map("n", "<Down>", ":resize +2<CR>", "Resize with arrows")
map("n", "<Left>", ":vertical resize -2<CR>", "Resize with arrows")
map("n", "<Right>", ":vertical resize +2<CR>", "Resize with arrows")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Buffers
map("n", "<leader><Tab>", ":bnext<CR>", "Buffers: Next Buffer")
map("n", "<S-Tab>", ":bprevious<CR>", "Buffers: Previous Buffer")
map("n", "<leader>vx", "<cmd>bp | bd#<CR>", "Buffers: close buffer") -- close buffer
map("n", "<leader>vb", "<cmd> enew <CR>", "Buffers: new buffer") -- new buffer
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Window management
map("n", "<leader>vv", "<C-w>v", "Split window [V]ertically") -- split window vertically
map("n", "<leader>vh", "<C-w>s", "Split window [H]orizontally") -- split window horizontally
map("n", "<leader>ve", "<C-w>=", "Make split windows [E]qual width & height") -- make split windows equal width & height
map("n", "<leader>vs", ":close<CR>", "Close current [S]plit window") -- close current split window
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Navigate between splits
map("n", "<C-k>", ":wincmd k<CR>", "Navigate between splits")
map("n", "<C-j>", ":wincmd j<CR>", "Navigate between splits")
map("n", "<C-h>", ":wincmd h<CR>", "Navigate between splits")
map("n", "<C-l>", ":wincmd l<CR>", "Navigate between splits")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Tabs
map("n", "<leader>to", ":tabnew<CR>", "Tabs: open new tab") -- open new tab
map("n", "<leader>tx", ":tabclose<CR>", "Tabs: close current tab") -- close current tab
map("n", "<leader>tn", ":tabn<CR>", "Tabs: go to next tab") --  go to next tab
map("n", "<leader>tp", ":tabp<CR>", "Tabs: go to previous tab") --  go to previous tab
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Toggle line wrapping
map("n", "<leader>tw", "<cmd>set wrap!<CR>", "Toggle line wrapping")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Stay in indent mode
map("v", "<", "<gv", "Stay in indent mode")
map("v", ">", ">gv", "Stay in indent mode")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
